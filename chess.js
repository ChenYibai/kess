var n = 9; // Board size
var board = []; // Each element is generated by newPiece()
var nam = ["姚", "姚", "华", "华", "马", "马", "猴", "猴", "王", "贾", "贾", "贾"];
var initPos = [[0, 0], [0, 8], [0, 1], [0, 7], [1, 0], [1, 8], [1, 2], [1, 6], [0, 4], [0, 3], [0, 5], [1, 4]];
var initBlood = 10, initAttack = 2;
// supplySprite: [[x, y, weight], ...]
// x, y indicate the icon's position in sprite.png
var supplySprite = [[20, 113, 3], // 0 Iron Sword
[19, 113, 2], // 1 Golden Sword
[18, 113, 1], // 2 Diamond Sword
[15, 78, 3], // 3 Iron Chestplate
[9, 78, 2], // 4 Golden Chestplate
[4, 78, 1], // 5 Diamond Chestplate
[30, 112, 1], // 6 TNT
[7, 9, 1], // 7 Potion of Healing
[17, 9, 1], // 8 Potion of Swiftness
[16, 9, 1], // 9 Potion of Strength
[23, 30, 1] // 10 Ice
];
var supplyW = supplySprite.reduce((p, c) => (p + c[2]), 0);

var player = 0;
var going = 0;
var killedi = 0, killedii = 0;
var turn = 0; // number of goes made up to now
var reviveList = []; // List of pieces waiting to be revived. Format: [[newPiece()], time]

// Basic helper functions
function cAlert(html) {
  $(document.body).append(`<div class="modal fade" id="cAlert" tabindex="-1">
    <div class="modal-dialog"><div class="modal-content">
    <div class="modal-body" style="text-align:center">${html}</div>
    <div class="modal-footer">
    <button type="button" class="btn btn-secondary" data-dismiss="modal">Confirm</button>
    </div></div></div></div>`);
  $("#cAlert").modal("show").on("shown.bs.modal", function () {
    $("#cAlert .btn-secondary").trigger("focus");
  });
  return new Promise(function (resolve, reject) {
    $("#cAlert").on("hidden.bs.modal", function () {
      $("#cAlert").remove();
      resolve();
    });
  });
}
function pos(x, y) {
  return `top: ${Number(x) * 50}px; left: ${Number(y) * 50}px; `;
}
function posObj(x, y) {
  return { "top": `${Number(x) * 50}px`, "left": `${Number(y) * 50}px` };
}
function spriteCss(l, s) {
  var x = l[0], y = l[1];
  return `background-image:url(img/sprite.png);
    background-position: ${- x * s}px ${- y * s}px;
    background-size: ${s * 32}px;
    width: ${s}px;
    height: ${s}px;
    display: inline-block;
    image-rendering: crisp-edges;`;
}
function spriteCssObj(l, s) {
  var x = l[0], y = l[1];
  return {
    "background-image": "url(img/sprite.png)",
    "background-position": `${- x * s}px ${- y * s}px`,
    "background-size": `${s * 32}px`,
    "width": `${s}px`,
    "height": `${s}px`,
    "display": "inline-block",
    "image-rendering": "crisp-edges"
  };
}
function newPiece(obj) {
  var init = {
    team: 0, level: 0,
    armor: 0, attack: initAttack, blood: initBlood, item: [],
    potionSwiftness: 0, potionStrength: 0,
    frozen: 0
  };
  $.extend(init, obj);
  return init;
}
function inBoard(x, y) {
  return (x >= 0 && x < n && y >= 0 && y < n);
}
function $cell(x, y) {
  return $("#board>tr").eq(x).children("td").eq(y);
}
function $piece(x, y) {
  return $(`#piece${board[x][y].team * 16 + board[x][y].level}`);
}
function dataSupply(x, y) {
  return Number($cell(x, y).attr("data-supply"));
}

window.onload = function () {
  let ht = "";
  for (let i = 0; i < n; i++) {
    ht += "<tr>";
    for (let i = 0; i < n; i++) ht += '<td data-supply="-1"></td>';
    ht += "</tr>";
  }
  $("#board").html(ht);
  for (var i = 3; i <= 5; i++)
    for (var j = 3; j <= 5; j++) {
      $cell(i, j).css("border", "3px solid #b1a");
    }

  for (var i = 0; i < n; i++) {
    board.push([]);
    for (var j = 0; j < n; j++)
      board[i].push(-1);
  }

  for (let i = 0; i < 12; i++) {
    let xI = n - 1 - initPos[i][0], yI = n - 1 - initPos[i][1];
    let nameI = nam[i];
    document.body.innerHTML += `<div class="piece teami" id="piece${i}"
      style="${pos(xI, yI)}" onclick="control(${xI}, ${yI})"
      onmouseover="infoBox(${xI}, ${yI})"
      onmouseout="clearInfoBox()">${nameI}</div>`;
    board[xI][yI] = newPiece({ team: 0, level: i });
  }
  for (let i = 0; i < 12; i++) {
    let xI = initPos[i][0], yI = initPos[i][1];
    let nameI = nam[i];
    document.body.innerHTML += `<div class="piece teamii" id="piece${String(Number(i) + 16)}"
      style="${pos(xI, yI)}" onclick="control(${xI}, ${yI})"
      onmouseover="infoBox(${xI}, ${yI})"
      onmouseout="clearInfoBox()">${nameI}</div>`;
    board[xI][yI] = newPiece({ team: 1, level: i });
  }

  $(".piece").append(`<div class="sword-img"></div><div class="armor-img"></div>`);
}

function infoBox(x, y) {
  if (going) return;
  $("#blood").empty();
  $("#item").empty();
  let boardXY = board[x][y];
  if (boardXY.frozen) return;
  document.getElementById("control-name").innerHTML = nam[boardXY.level];
  for (let i = 1; i * 2 <= boardXY.blood; i++)
    $("#blood").append(`<img src="img/heart.png" style="width: 20px">`);
  if (boardXY.blood % 2)
    $("#blood").append(`<img src="img/heart-half.png" style="width: 20px">`);
  for (var item of boardXY.item)
    $("#item").append(`<div style="${spriteCss(supplySprite[item], 20)}"
      class="item-img" onclick="useItem(${item}, ${x}, ${y})"></div>`);
  $("#control").show();
}
function clearInfoBox() {
  if (going) return;
  $("#control").hide();
}

function control(x, y) {
  function controlHelper(x, y, nx, ny, player) {
    if (!inBoard(nx, ny)) return;
    if (board[nx][ny].team == player) return;
    if (board[nx][ny] == -1)
      $("#go").append(`<div class="go-empty" onclick="go(${x},${y},${nx},${ny})"
        style="${pos(nx, ny)}"></div>`);
    else if (board[nx][ny].team != player) {
      $("#go").append(`<div class="go-kill" onclick="go(${x},${y},${nx},${ny})"
        style="${pos(nx, ny)}"></div>`);
    }
  }

  let boardXY = board[x][y];
  if (boardXY.frozen) return;
  if (player == boardXY.team && going == 0) {
    going = 2;
    // Compute where the piece can go and store the destinations in `res`
    var res = [];
    switch (boardXY.level) {
      case 0:
      case 1:
        var dx = [-1, 0, 1, 0], dy = [0, -1, 0, 1];
        for (let d = 0; d < 4; d++) {
          let nx = Number(x) + Number(dx[d]), ny = Number(y) + Number(dy[d]);
          while (inBoard(nx, ny) && board[nx][ny] == -1) {
            res.push([nx, ny]);
            nx += dx[d], ny += dy[d];
          }
          if (inBoard(nx, ny) && (board[nx][ny] == -1 || board[nx][ny].team != player))
            res.push([nx, ny]);
        }
        break;
      case 2:
      case 3:
        var dx = [-1, -1, 1, 1], dy = [-1, 1, -1, 1];
        for (let d = 0; d < 4; d++) {
          let nx = Number(x) + Number(dx[d]), ny = Number(y) + Number(dy[d]);
          while (inBoard(nx, ny) && board[nx][ny] == -1) {
            res.push([nx, ny]);
            nx += dx[d], ny += dy[d];
          }
          if (inBoard(nx, ny) && (board[nx][ny] == -1 || board[nx][ny].team != player))
            res.push([nx, ny]);
        }
        dx = [1, -1, 0, 0], dy = [0, 0, 1, -1];
        for (let d = 0; d < 4; d++) {
          let nx = Number(x) + dx[d], ny = Number(y) + dy[d];
          if (inBoard(nx, ny) && (board[nx][ny] == -1 || board[nx][ny].team != player))
            res.push([nx, ny]);
        }
        break;
      case 4:
      case 5:
        var dx = [1, -1, 1, -1, 2, -2, 2, -2], dy = [2, 2, -2, -2, 1, 1, -1, -1];
        for (let d = 0; d < 8; d++) {
          let nx = Number(x) + Number(dx[d]), ny = Number(y) + Number(dy[d]);
          if (inBoard(nx, ny) && (board[nx][ny] == -1 || board[nx][ny].team != player))
            res.push([nx, ny]);
        }
        break;
      case 6:
      case 7:
        for (let i = 0; i < n; i++) for (let j = 0; j < n; j++) {
          if (Math.abs(i - x) + Math.abs(j - y) <= 2 && // Manhattan distance <= 2
            (board[i][j] == -1 || board[i][j].team != player))
            res.push([i, j]);
        }
        break;
      case 9:
      case 10:
      case 11:
        var dx = [1, -1, 0, 0], dy = [0, 0, 1, -1];
        for (let d = 0; d < 4; d++) {
          let nx = Number(x) + dx[d], ny = Number(y) + dy[d];
          if (inBoard(nx, ny) && (board[nx][ny] == -1 || board[nx][ny].team != player))
            res.push([nx, ny]);
        }
        break;
    }
    // Process effect of swiftness
    if (boardXY.potionSwiftness) {
      for (let i = 0; i < n; i++) for (let j = 0; j < n; j++) {
        if (Math.abs(i - x) + Math.abs(j - y) <= 3 && // Manhattan distance <= 3
          (board[i][j] == -1 || board[i][j].team != player))
          res.push([i, j]);
      }
    }
    // Render the clickable green(or other colors) squares
    for (var point of res) controlHelper(x, y, point[0], point[1], player);
  }
  if (going == 1) {
    $("#go").empty();
    going = 0;
  }
  if (going == 2) going = 1;
}

// The 3 functions below are just for displaying.
// They don't change the value of `board`, so you should change it manually.
// Just to move a piece without considering anything else
function movePiece(x, y, nx, ny) {
  var bxy = board[x][y];
  var ele = document.getElementById("piece" + String(Number(bxy.team) * 16 + Number(bxy.level)));
  ele.onclick = function () {
    control(nx, ny);
  };
  ele.onmouseover = function () {
    infoBox(nx, ny);
  };
  $(ele).css(posObj(nx, ny));
}
// Display a piece as dead (put it out of the board)
var killPiecePos = 0;
function killPiece(x, y) {
  var bxy = board[x][y];
  var ele = document.getElementById("piece" + String(Number(bxy.team) * 16 + Number(bxy.level)));
  $(ele).css(posObj((killPiecePos++) % n, n + 1))
  ele.onclick = function () { };
  ele.onmouseover = function () { };
  $(ele).children(".sword-img").css("background", "none");
  $(ele).children(".armor-img").css("background", "none");
  $cell(x, y).children(".frozen-img").remove();
  reviveList.push([bxy, 5]); // `5` means reviving after 5 goes

  var winFlag = (bxy.level == 8 ? bxy.team : -1);
  if (winFlag == 0) cAlert("<h2>Blue wins!</h2>");
  if (winFlag == 1) cAlert("<h2>Red wins!</h2>");
}
// Display a piece as alive (put it back in the board)
function revivePiece(i, nx, ny) {
  // if (bxy[0] == 0) killedi--;
  // else killedii--;
  var bxy = reviveList[i][0];
  var ele = document.getElementById("piece" + String(Number(bxy.team) * 16 + Number(bxy.level)));
  $(ele).css(posObj(nx, ny));
  ele.onclick = function () {
    control(nx, ny);
  };
  ele.onmouseover = function () {
    infoBox(nx, ny);
  }
  reviveList.splice(i, 1);
}

// Perform general operations necessary after using a item
function afterItem() {
  $("#go").empty();
  $("#control").fadeOut();
  going = 0;
}

// Perform general operations necessary after each go
function afterGo() {
  afterItem();

  player = 1 - player;
  if (player == 0) document.getElementById("player").style.background = "red";
  else document.getElementById("player").style.background = "blue";

  // Generate supply
  turn++;
  if (Math.random() < 0.33) {
    var pt, px, py; // Type, X, Y (X, Y indicate its position in the board)
    // Generate pt(type) according to the weights
    var t = Math.floor(Math.random() * supplyW);
    for (var i in supplySprite)
      if (t >= supplySprite[i][2]) t -= supplySprite[i][2];
      else { pt = Number(i); break; }
    // Generate px, py(position)
    var cnt = 0;
    do {
      px = Math.floor(Math.random() * 3) + 3;
      py = Math.floor(Math.random() * 3) + 3;
      cnt++;
    } while ((board[px][py] != -1 || dataSupply(px, py) != -1) && cnt < 18);
    if (cnt < 18) {
      $cell(px, py).attr("data-supply", pt)
        .html(`<div style="${spriteCss(supplySprite[pt], 36)}margin:auto;"></div>`);
    }
  }

  // Revive pieces
  for (var i in reviveList) {
    var item = reviveList[i];
    item[1]--;
    if (item[1] == 0) {
      var rx, ry;
      if (item[0].team == 0) {
        rx = n - 1, ry = n - 1;
        while (board[rx][ry] != -1) {
          ry--;
          if (ry == -1) ry = n - 1, rx--;
        }
      }
      else {
        rx = 0, ry = 0;
        while (board[rx][ry] != -1) {
          ry++;
          if (ry == n) ry = 0, rx++;
        }
      }
      board[rx][ry] = newPiece({ team: item[0].team, level: item[0].level });
      revivePiece(i, rx, ry);
    }
  }

  // Decrease buff(from potions) duration
  for (var i = 0; i < n; i++) for (var j = 0; j < n; j++) if (board[i][j] != -1) {
    board[i][j].potionSwiftness = Math.max(0, board[i][j].potionSwiftness - 1);
    board[i][j].potionStrength = Math.max(0, board[i][j].potionStrength - 1);
    board[i][j].frozen = Math.max(0, board[i][j].frozen - 1);
    if (board[i][j].frozen == 0) $cell(i, j).children(".frozen-img").remove();
  }
}

// Main function triggered when player wants to move a piece
function go(x, y, nx, ny) {
  let bxy = board[x][y], nbxy = board[nx][ny];
  if (nbxy == -1) { // Steps into empty square
    movePiece(x, y, nx, ny);
    var supply = dataSupply(nx, ny);
    if (supply != -1) {
      if (supply >= 0 && supply <= 2) { // Sword
        if (supply + 3 > board[x][y].attack) {
          board[x][y].attack = supply + 3;
          // Display it on the piece
          $piece(x, y).children(".sword-img").css(spriteCssObj(supplySprite[supply], 15));
        }
      }
      else if (supply >= 3 && supply <= 5) { // Armor
        if (supply - 2 > board[x][y].armor) {
          board[x][y].armor = supply - 2;
          $piece(x, y).children(".armor-img").css(spriteCssObj(supplySprite[supply], 15));
        }
      }
      else { // Item
        board[x][y].item.push(supply);
      }
      $cell(nx, ny).attr("data-supply", -1).html("");
    }
    board[nx][ny] = board[x][y];
    board[x][y] = -1;
  }
  else { // Attack another piece
    board[nx][ny].blood -= Math.max(0, board[x][y].attack
      + (board[x][y].potionStrength ? 2 : 0) - board[nx][ny].armor);
    nbxy = board[nx][ny]; bxy = board[x][y];
    if (nbxy.blood <= 0) { // Knock Out
      killPiece(nx, ny);
      bxy.attack = Math.max(bxy.attack, nbxy.attack), nbxy.attack = 0; // Transfer sword
      if (bxy.attack >= 3)
        $piece(x, y).children(".sword-img").css(spriteCssObj(supplySprite[bxy.attack - 3], 15));
      bxy.armor = Math.max(bxy.armor, nbxy.armor), nbxy.armor = 0; // Transfer armor
      if (bxy.armor >= 1)
        $piece(x, y).children(".armor-img").css(spriteCssObj(supplySprite[bxy.armor + 2], 15));
      bxy.item = bxy.item.concat(nbxy.item); // Transfer item
      movePiece(x, y, nx, ny);
      board[x][y] = -1; board[nx][ny] = bxy;
    }
    // Still alive; Knockback; 王 and frozen pieces cannot be knocked back
    else if (board[nx][ny].level != 8 && !board[nx][ny].frozen) {
      var kb = [0, 0];
      var sign = (x) => (x > 0 ? 1 : (x == 0 ? 0 : -1));
      kb[0] = sign(nx - x), kb[1] = sign(ny - y);
      var kbnx = nx + kb[0], kbny = ny + kb[1];
      if (inBoard(kbnx, kbny) && board[kbnx][kbny] == -1) {
        movePiece(nx, ny, kbnx, kbny);
        board[kbnx][kbny] = board[nx][ny], board[nx][ny] = -1;
      }
    }
  }
  afterGo();
}

function useItem(item, x, y) {
  switch (item) {
    case 6:
      for (var i = 0; i < n; i++) for (var j = 0; j < n; j++) {
        var dist = (i - x) * (i - x) + (j - y) * (j - y);
        if (dist <= 8 && board[i][j] != -1) {
          // TNT explosion destroys ice (regardless of its team)
          if (board[i][j].frozen) {
            board[i][j].frozen = 0;
            $cell(i, j).children(".frozen-img").remove();
          }
          // TNT hurts enemy's pieces
          if (board[i][j].team != board[x][y].team) {
            board[i][j].blood -= Math.max(0, 9 - dist - board[i][j].armor);
            if (board[i][j].blood <= 0) {
              killPiece(i, j);
              board[i][j] = -1;
            }
          }
        }
      }
      afterGo();
      break;
    case 7:
      board[x][y].blood = 10;
      afterItem();
      break;
    case 8:
      board[x][y].potionSwiftness = 8;
      afterItem();
      break;
    case 9:
      board[x][y].potionStrength = 8;
      afterItem();
      break;
    case 10:
      var dx = [1, 1, 1, 0, 0, -1, -1, -1], dy = [1, 0, -1, 1, -1, 1, 0, -1];
      for (var i = 0; i < 8; i++) {
        var nx = x + dx[i], ny = y + dy[i];
        if (inBoard(nx, ny) && board[nx][ny] != -1
          && board[nx][ny].team != board[x][y].team) {
          board[nx][ny].frozen += 8;
          if ($cell(nx, ny).children(".frozen-img").length == 0)
            $cell(nx, ny).append(`<img class="frozen-img" src="img/frozen.png">`);
        }
      }
      afterGo();
      break;
  }

  // Remove the item from the piece's "item" property
  for (var i = 0; i < board[x][y].item.length; i++)
    if (board[x][y].item[i] == item) {
      board[x][y].item.splice(i, 1);
      break;
    }
}

function giveUp() {
  if (player == 0) {
    cAlert("<h2>Blue Wins!</h2>");
  }
  else {
    cAlert("<h2>Red Wins!</h2>");
  }
}